// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/buildpack/pack/builder (interfaces: Buildpack)

// Package testmocks is a generated GoMock package.
package testmocks

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	builder "github.com/buildpack/pack/builder"
)

// MockBuildpackI is a mock of Buildpack interface
type MockBuildpackI struct {
	ctrl     *gomock.Controller
	recorder *MockBuildpackIMockRecorder
}

// MockBuildpackIMockRecorder is the mock recorder for MockBuildpackI
type MockBuildpackIMockRecorder struct {
	mock *MockBuildpackI
}

// NewMockBuildpackI creates a new mock instance
func NewMockBuildpackI(ctrl *gomock.Controller) *MockBuildpackI {
	mock := &MockBuildpackI{ctrl: ctrl}
	mock.recorder = &MockBuildpackIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBuildpackI) EXPECT() *MockBuildpackIMockRecorder {
	return m.recorder
}

// Descriptor mocks base method
func (m *MockBuildpackI) Descriptor() builder.BuildpackDescriptor {
	ret := m.ctrl.Call(m, "Descriptor")
	ret0, _ := ret[0].(builder.BuildpackDescriptor)
	return ret0
}

// Descriptor indicates an expected call of Descriptor
func (mr *MockBuildpackIMockRecorder) Descriptor() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Descriptor", reflect.TypeOf((*MockBuildpackI)(nil).Descriptor))
}

// Open mocks base method
func (m *MockBuildpackI) Open() (io.ReadCloser, error) {
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open
func (mr *MockBuildpackIMockRecorder) Open() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockBuildpackI)(nil).Open))
}
